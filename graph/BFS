# 그래프는 딕셔너리를 사용해서 노드를 키로 그리고 인접한 노드를 값으로 만들 수 있다.
# BFS는 큐를 사용한 반복 구현이 가능하고 재귀로 구현은 불가능 하다.
# 한 노드를 방문 후 인접 노드를 방문 여부 확인 후 방문 표시 및 큐에 집어 넣는다.

graph = {
  1: [2, 3, 4],
  2: [5],
  3: [5],
  4: [],
  5: [6, 7],
  6: [],
  7: [3]
}

def iterative_bfs(start_v):
    discovered = [start_v]
    queue = [start_v]
    while queue:
        v = queue.pop(0)
        for w in graph[v]:
            if w not in discovered:
                discovered.append(w)
                queue.append(w)
    return discovered

print(f'iterative_bfs: {iterative_bfs(1)}')
