# 배열 내 원소의 합으로 타겟 만들기
# 브루트 포스로 모든 경우 계산

class Solution: 
    def twoSum(self, nums: List[int], target: int) -> List[int]: 
        for i in range(len(nums)): 
            for j in range(i+1, len(nums)): 
                if nums[i] + nums[j] == target: 
                    return [i, j]
                    

# in을 이용
class Solution: 
    def twoSum(self, nums: List[int], target: int) -> List[int]: 
        for i,n in enumerate(nums): 
            complement = target - n 
             
            if complement in nums[i+1:]: 
                return nums.index(n), nums[i+1:].index(complement)+(i+1)

# 해시를 이용
# 위의 in 연산에 대한 시간 복잡도를 개선
# 매번 in으로 찾는 것이 아니라 해시를 저장하므로 탐색 속도가 빨라짐(복잡도 상으로는)
# 해시에는 값을 키로 인덱스를 값으로 저장

class Solution: 
    def twoSum(self, nums: List[int], target: int) -> List[int]: 
        nums_map = {}
        
        for i, num in enumerate(nums):
            if target - num in nums_map:
                return [numps_map[target-num], i]
            nums_map[num]=i

# 투 포인트 사용
# 간결 및 가독성이 좋지만 문제는 입력 값이 정렬되어 있어야 함
# 값을 구하는 경우는 문제 없지만 인덱스를 구하는 문제에서는 사용 불가 

class Solution: 
    def twoSum(self, nums: List[int], target: int) -> List[int]: 
        left, right = 0, len(nums) - 1
        
        while not left == right:
            if nums[left] + nums[right] < target:
                left += 1
            elif nums[left] + nums[right] > target:
                right -= 1
                
            else:
                return left, right
